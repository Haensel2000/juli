import os;
import os.path;
          
CPPUTILS_PATH = ARGUMENTS.get('cpputils', None)
LLVM_PATH = ARGUMENTS.get('llvm', None)
LLVM_BUILD_PATH = ARGUMENTS.get('llvm-build', None)
ANTLR3C_PATH = ARGUMENTS.get('antlr3c', None)

include_path = []
lib_path = []

if CPPUTILS_PATH:
  include_path.append(os.path.join(CPPUTILS_PATH, 'src'))
if LLVM_PATH:
  include_path.append(os.path.join(LLVM_PATH, 'include'))
  
if CPPUTILS_PATH:
  lib_path.append(os.path.join(CPPUTILS_PATH, 'build'))
if LLVM_BUILD_PATH:
  lib_path.append(os.path.join(LLVM_BUILD_PATH, 'lib'))
if ANTLR3C_PATH:
  lib_path.append(os.path.join(ANTLR3C_PATH, 'build'))

libs=[
  'pthread', 
  'm', 
  'antlr3c', 
  'cpputils', 
  'LLVMX86CodeGen',
  'LLVMSelectionDAG',
  'LLVMAsmPrinter',
  'LLVMMCParser',
  'LLVMX86Desc',
  'LLVMX86AsmPrinter',
  'LLVMX86Utils',
  'LLVMX86Info',
  'LLVMJIT',
  'LLVMRuntimeDyld',
  'LLVMExecutionEngine',
  'LLVMCodeGen',
  'LLVMScalarOpts',
  'LLVMInstCombine',
  'LLVMTransformUtils',
  'LLVMipa',
  'LLVMAnalysis',
  'LLVMTarget',
  'LLVMMC',
  'LLVMCore', 
  'LLVMSupport', 
  'dl']

ccflags = '-D__STDC_FORMAT_MACROS -D_DEBUG -D_GNU_SOURCE -D__STDC_LIMIT_MACROS -D__STDC_CONSTANT_MACROS -O0 -g3 -Wall -c -fmessage-length=0'

source_files = ['#' + os.path.join(r,f).replace('src', 'build') for r,d,fs in os.walk('src') for f in fs if f.endswith('.cpp')]

env = Environment(CC = 'g++',
                  CPPPATH = include_path, 
                  LIBPATH=lib_path, 
                  LIBS=libs, 
                  CCFLAGS=ccflags,
                  source_files=source_files)   
VariantDir('build', 'src', duplicate=0)

app = os.path.join('src', 'parser', 'antlr');

env.Command([os.path.join(app, f) for f in ['JLLexer.h', 'JLLexer.c', 'JLParser.h', 'JLParser.c']], 
os.path.join(app, 'JL.g'), "java -cp libs/antlr-3.4.jar org.antlr.Tool $SOURCE")
objs = env.Object(target='#build/JLParser', source=os.path.join(app, 'JLParser.c')) + env.Object(target='#build/JLLexer', source=os.path.join(app, 'JLLexer.c'))

env.Program(target='build/jlc', source=source_files + objs)

Clean('.', 'build')