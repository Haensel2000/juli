import os;
import os.path;

#for r,d,fs in os.walk('src'):
#  for f in fs:
#    if f.endswith('.c'):
#      os.rename(os.path.join(r, f), os.path.join(r, f[:-2] + '.cpp'))

CPPUTILS_PATH = '/home/hannes/development/lib/utils/cpp-utils'
LLVM_PATH = '/home/hannes/development/lib/compiler/llvm/'

include_path = [
  '#src', 
  os.path.join(CPPUTILS_PATH, 'src'), 
  os.path.join(LLVM_PATH, 'include')
]

lib_path = [
  os.path.join(CPPUTILS_PATH, 'Debug'), 
  os.path.join(LLVM_PATH, 'Debug+Asserts/lib')
]

libs = [
  'pthread',
  'm',
  'antlr3c',
  'cpputils',
  'LLVMX86CodeGen',
  'LLVMSelectionDAG',
  'LLVMAsmPrinter',
  'LLVMX86AsmParser',
  'LLVMX86Disassembler',
  'LLVMMCParser',
  'LLVMX86Desc',
  'LLVMX86AsmPrinter',
  'LLVMX86Utils',
  'LLVMX86Info',
  'LLVMJIT',
  'LLVMRuntimeDyld',
  'LLVMExecutionEngine',
  'LLVMCodeGen',
  'LLVMScalarOpts',
  'LLVMInstCombine',
  'LLVMTransformUtils',
  'LLVMipa',
  'LLVMAnalysis',
  'LLVMTarget',
  'LLVMMC',
  'LLVMObject',
  'LLVMCore',
  'LLVMSupport',
  'dl'
]

ccflags = '-D__STDC_FORMAT_MACROS -D_DEBUG -D_GNU_SOURCE -D__STDC_LIMIT_MACROS -D__STDC_CONSTANT_MACROS -O0 -g3 -Wall -c -fmessage-length=0'

source_files = ['#' + os.path.join(r,f).replace('src', 'build') for r,d,fs in os.walk('src') for f in fs if f.endswith('.cpp')]
#source_files = source_files + ['#src/parser/antlr/JLLexer.o', '#build/parser/antlr/JLParser.o']

env = Environment(CC = 'g++',
                  CPPPATH = include_path, 
                  LIBPATH=lib_path, 
                  LIBS=libs, 
                  CCFLAGS=ccflags,
                  source_files=source_files)   
VariantDir('build', 'src', duplicate=0)

app = os.path.join('src', 'parser', 'antlr');

env.Command([os.path.join(app, f) for f in ['JLLexer.h', 'JLLexer.c', 'JLParser.h', 'JLParser.c']], 
os.path.join(app, 'JL.g'), "java -cp libs/antlr-3.4.jar org.antlr.Tool $SOURCE")
objs = env.Object(target='#build/JLParser', source=os.path.join(app, 'JLParser.c')) + env.Object(target='#build/JLLexer', source=os.path.join(app, 'JLLexer.c'))

env.Program(target='build/jlc', source=source_files + objs)

Clean('.', 'build')